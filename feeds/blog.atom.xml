<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Damon McDougall's Homepage</title><link href="http://dmcdougall.github.io/" rel="alternate"></link><link href="http://dmcdougall.github.io/feeds/blog.atom.xml" rel="self"></link><id>http://dmcdougall.github.io/</id><updated>2013-05-17T00:00:00+02:00</updated><entry><title>Getting started with matplotlib</title><link href="http://dmcdougall.github.io/getting-started-with-matplotlib.html" rel="alternate"></link><updated>2013-05-17T00:00:00+02:00</updated><author><name>Damon McDougall</name></author><id>tag:dmcdougall.github.io,2013-05-17:getting-started-with-matplotlib.html</id><summary type="html">&lt;p&gt;Bear with me; this is my first blog post.&lt;/p&gt;
&lt;p&gt;I want to write about something that I care about.  I care about software and I
care about science.  More importantly, I care about how these two interact and
how software can help the scientific community.  Presentation of science to the
public in an understandable fashion is difficult.  It's always hard to gauge at
what level a scientist should pitch their presentation, and that's where
pictures come in handy.&lt;/p&gt;
&lt;p&gt;Most people abosrb information best visually.  Auditory and kinematic learners
also exist, but most people are visual learners.  To that end, I decided to
write about &lt;a class="reference external" href="http://matplotlib.org"&gt;matplotlib&lt;/a&gt;, a plotting library written in Python.  This should be
fairly introductory.&lt;/p&gt;
&lt;div class="section" id="installing"&gt;
&lt;h2&gt;Installing&lt;/h2&gt;
&lt;p&gt;For some reason, installing python packages is notoriously hard if you're not
exposed to the various different approaches already out there.  I'm not going
to go through all of them.  Instead, I recommend you install matplotlib through
your operating system's package manager.  If you're on Ubuntu, it's
&lt;tt class="docutils literal"&gt;aptitude&lt;/tt&gt;.  If you're on RHEL, it's &lt;tt class="docutils literal"&gt;yum&lt;/tt&gt;.  If you're on OS X, you don't
have a package manager by default and you should install one.  I recommend
&lt;a class="reference external" href="http://www.macports.org"&gt;macports&lt;/a&gt;, but others speak volumes about &lt;a class="reference external" href="http://mxcl.github.io/homebrew"&gt;homebrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Personally, I like to install software from source by hand.  If you're scared
of doing it you should give it a try.  It's super educational.  I will go
through the installation from source procedure on a Mac in another blog post,
since I don't want to bloat this one.  In what remains, I'll assume you have it
installed.&lt;/p&gt;
&lt;p&gt;To check you have installed matplotlib correctly, you can execute the following
in a terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python -c &lt;span class="s2"&gt;&amp;quot;import matplotlib&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The command &lt;tt class="docutils literal"&gt;echo $?&lt;/tt&gt; just prints out the exit status of the previous
command.  If you get a &lt;tt class="docutils literal"&gt;0&lt;/tt&gt; then the previous command was successful.  If you
get a &lt;tt class="docutils literal"&gt;1&lt;/tt&gt;, or anything nonzero, then matplotlib is not installed correctly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="your-first-plot"&gt;
&lt;h2&gt;Your first plot&lt;/h2&gt;
&lt;p&gt;Now that matplotlib is installed correctly, you can create your first plot.&lt;/p&gt;
&lt;p&gt;From now on, I'll be using the IPython prompt, but you don't need that to
along.  All the commands are the same and will work in the regular python
prompt.&lt;/p&gt;
&lt;p&gt;First, we boot up the ipython console:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ ipython
Python 2.7.3 (default, Nov 29 2012, 11:01:29)
Type &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.

IPython 0.13.2 -- An enhanced Interactive Python.
?         -&amp;gt; Introduction and overview of IPython&amp;#39;s features.
%quickref -&amp;gt; Quick reference.
help      -&amp;gt; Python&amp;#39;s own help system.
object?   -&amp;gt; Details about &amp;#39;object&amp;#39;, use &amp;#39;object??&amp;#39; for extra details.

In [1]:
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we import &lt;tt class="docutils literal"&gt;pyplot&lt;/tt&gt;, a set of convenience methods that interface well with
matplotlib's internals:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, we create a &lt;tt class="docutils literal"&gt;Figure&lt;/tt&gt; object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;Figure&lt;/tt&gt; is the object that holds the axes, which we create now:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_subplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;Axes&lt;/tt&gt; &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt; object is where most of the magic happens.  This is the
object you will interface with the most to do all of your plotting.  Here is a
simple plotting command that creates a line plot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Line2D&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x10860ad50&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;plot&lt;/tt&gt; function takes a list of &lt;tt class="docutils literal"&gt;x&lt;/tt&gt;-coordinates and a list of
&lt;tt class="docutils literal"&gt;y&lt;/tt&gt;-coordinates and returns a list of objects called &lt;tt class="docutils literal"&gt;Line2D&lt;/tt&gt; objects.
A &lt;tt class="docutils literal"&gt;Line2D&lt;/tt&gt; object is a matplotlib object that represents the lines in the
figure that join the coordinates together.  We will explore &lt;tt class="docutils literal"&gt;Line2D&lt;/tt&gt; objects,
and other objects, in a different post.  For now, just take it for granted that
&lt;tt class="docutils literal"&gt;ax.plot&lt;/tt&gt; connects the passed coordinates with lines to create a line plot.
We can save the figure with the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;plot.pdf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will save the figure in &lt;tt class="docutils literal"&gt;pdf&lt;/tt&gt; format.  Open it and take a look.  It
should look a little like this:&lt;/p&gt;
&lt;object class="align-left" data="./static/images/lineplot.svg" style="width: 600px; height: 400px;" type="image/svg+xml"&gt;
./static/images/lineplot.svg&lt;/object&gt;
&lt;p&gt;There are lots of file types that matplotlib supports.  The ones I use most
commonly are &lt;tt class="docutils literal"&gt;pdf&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;png&lt;/tt&gt;.  In fact, the image above is an &lt;tt class="docutils literal"&gt;svg&lt;/tt&gt; file.
It is common in the scientific community to produce scalable vector graphics,
and matplotlib allows this.  It also supports &lt;tt class="docutils literal"&gt;ps&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;eps&lt;/tt&gt;.  For a full
list of supported file types see &lt;a class="reference external" href="http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.savefig"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;It's actually an &lt;tt class="docutils literal"&gt;AxesSubplot&lt;/tt&gt; object, not an &lt;tt class="docutils literal"&gt;Axes&lt;/tt&gt; object.  An
&lt;tt class="docutils literal"&gt;AxesSubplot&lt;/tt&gt; is just an &lt;tt class="docutils literal"&gt;Axes&lt;/tt&gt; object with some extra functions to
allow manipulation of its position within a &lt;tt class="docutils literal"&gt;Figure&lt;/tt&gt;.  The reason for
this is that there may be more than one set of axes in a figure.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="another-example"&gt;
&lt;h2&gt;Another example&lt;/h2&gt;
&lt;p&gt;You can stop here, or you can follow along with a more complicated line plot
using &lt;tt class="docutils literal"&gt;numpy&lt;/tt&gt;, a high performance python library for dealing with array
objects.  Carrying on from within the same ipython session:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cla&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This clears the axes of the old plot ready to plot something new.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we import &lt;tt class="docutils literal"&gt;numpy&lt;/tt&gt; so we can use it below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This creates an array, &lt;tt class="docutils literal"&gt;x&lt;/tt&gt;, of 1000 equally spaced points between &lt;tt class="docutils literal"&gt;0&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;1&lt;/tt&gt;, inclusive.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This line takes advantage of some of &lt;tt class="docutils literal"&gt;numpy&lt;/tt&gt;'s machinery.  The multiplication
of &lt;tt class="docutils literal"&gt;numpy&lt;/tt&gt; arrays is done component-wise.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Line2D&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x108a728d0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again, we pass in the &lt;tt class="docutils literal"&gt;x&lt;/tt&gt;- and &lt;tt class="docutils literal"&gt;y&lt;/tt&gt;-coordinates to &lt;tt class="docutils literal"&gt;plot&lt;/tt&gt;.  This draws
lines between the passed coordinates.  Go ahead and save your creation.  It
should look something like this:&lt;/p&gt;
&lt;object class="align-left" data="./static/images/sineplot.svg" style="width: 600px; height: 400px;" type="image/svg+xml"&gt;
./static/images/sineplot.svg&lt;/object&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="matplotlib"></category><category term="science"></category></entry></feed>