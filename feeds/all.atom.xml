<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Damon McDougall's Homepage</title><link href="http://dmcdougall.github.io/" rel="alternate"></link><link href="http://dmcdougall.github.io/feeds/all.atom.xml" rel="self"></link><id>http://dmcdougall.github.io/</id><updated>2013-05-29T00:00:00+02:00</updated><entry><title>Publication-ready the first time: Beautiful, reproducible plots with Matplotlib</title><link href="http://dmcdougall.github.io/publication-ready-the-first-time-beautiful-reproducible-plots-with-matplotlib.html" rel="alternate"></link><updated>2013-05-29T00:00:00+02:00</updated><author><name>Damon McDougall</name></author><id>tag:dmcdougall.github.io,2013-05-29:publication-ready-the-first-time-beautiful-reproducible-plots-with-matplotlib.html</id><summary type="html">&lt;p&gt;First things first, mad props to &lt;a class="reference external" href="http://agentzlerich.blogspot.com/"&gt;Rhys Ulerich&lt;/a&gt; for coming up with this title.&lt;/p&gt;
&lt;p&gt;In my &lt;a class="reference external" href="http://damon-is-a-geek.com/getting-started-with-matplotlib.html"&gt;last post&lt;/a&gt;, I gave a very brief introduction into &lt;a class="reference external" href="http://matplotlib.org"&gt;matplotlib&lt;/a&gt;.  This
time I'd like to cover some of the more finicky details.  Details that pertain
to making figures look good in your journal publications.&lt;/p&gt;
&lt;p&gt;We'll cover three main aspects of plot aesthetics.  First, font size.
Optimising font size is crucial to making your figures look the part in journals.
Second, when the fonts in your plots don't match the fonts in the main body
text, the flow of the document becomes jarring.  We'll talk about how to fix
that.  Third, tick marks.  Usually, figures need to be shrunk down to fit in a
page nicely.  Adjusting the number of tick marks can make your figures look a
lot less busy.  We'll also go over optimising the physical size of your
graphics so that the effect of shrinking your figures down to fit in the page
doesn't undo all the hard work you just put in to make your graphs look good.&lt;/p&gt;
&lt;p&gt;To wrap up, I'm going to try package all these touches into a single file.
This should make it easy to create reproducible figures.&lt;/p&gt;
&lt;div class="section" id="font-size"&gt;
&lt;h2&gt;Font size&lt;/h2&gt;
&lt;p&gt;The first thing to notice is that the font size will need some adjust for most
journals.  Usually, printed font size is around &lt;tt class="docutils literal"&gt;10pt&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;11pt&lt;/tt&gt;.  Setting
the font size of the various text elements in your plots is, of course, a
matter of personal preference.  That said, I tend to make the font size in my
figures one size smaller than that of the text in the main body of the article.
Your journal's website should tell you what font size they use.&lt;/p&gt;
&lt;p&gt;There are three main font elements in a matplotlib figure; the axes labels;
tick labels; and the text inside a legend.  The most common way to adjust these
is to manipulate the &lt;tt class="docutils literal"&gt;rcParams&lt;/tt&gt; dictionary.  In the following example python
code, we set the font size of each of these elements to &lt;tt class="docutils literal"&gt;9pt&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;rcParams&lt;/span&gt;
&lt;span class="n"&gt;rcParams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;axes.labelsize&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="n"&gt;rcParams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;xtick.labelsize&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="n"&gt;rcParams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ytick.labelsize&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="n"&gt;rcParams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;legend.fontsize&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As long as you remember to do this before saving the figure, you should see the
changes.  I usually leave all the &lt;tt class="docutils literal"&gt;rcParams&lt;/tt&gt; related foo at the top of my
script, just to keep it all in one place.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="typeface"&gt;
&lt;h2&gt;Typeface&lt;/h2&gt;
&lt;p&gt;Probably the most important issue is the font the is used in the typesetting
of your figure's text elements.  By default, matplotlib does not use the
ubiquitous Computer Modern Roman font.  In fact, by default, it does not even
use &lt;tt class="docutils literal"&gt;LaTeX&lt;/tt&gt; to typeset the text.  To do so, see the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;rcParams&lt;/span&gt;
&lt;span class="n"&gt;rcParams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;font.family&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;serif&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;rcParams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;font.serif&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Computer Modern Roman&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;rcParams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;text.usetex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A lot of journals use Computer Modern Roman, but some don't.  Times is a
commonly used font.  Using a nondefault font is a little more tricky and I will
address that later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="adjusting-the-number-of-ticks"&gt;
&lt;h2&gt;Adjusting the number of ticks&lt;/h2&gt;
&lt;p&gt;When figures get shrunk down to fit inside a column of a journal article, it
might be worth adjusting the number of ticks there are on the y-axis.
Matplotlib tries to be clever and gives you a 'nice-looking' number of ticks,
but sometimes it doesn't cut the mustard.  To fiddle around, you'll need to
play with a &lt;tt class="docutils literal"&gt;ticker&lt;/tt&gt; object.  We'll use a convenience ticker called
&lt;tt class="docutils literal"&gt;MaxNLocator&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.ticker&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MaxNLocator&lt;/span&gt;
&lt;span class="n"&gt;my_locator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MaxNLocator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Set up axes and plot some awesome science&lt;/span&gt;

&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaxis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_major_locator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_locator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The number &lt;tt class="docutils literal"&gt;6&lt;/tt&gt; just says, &amp;quot;give me no more than 6 ticks, and give them to me
at nice locations&amp;quot;.  It doesn't actually say that, I just look at code so long
all day I feel like it starts talking to me.  Coffee helps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-figure-size"&gt;
&lt;h2&gt;The figure size&lt;/h2&gt;
&lt;p&gt;This is probably the most important of all the setting mentioned so far.
Setting the physical figure dimensions appropriately will mean that your graphs
aren't 'shrunk down' to fit into your papers.  This means font sizes will stay
true to their set values.  This is also the most finicky setting.&lt;/p&gt;
&lt;p&gt;We will optimise figure dimensions for the specific &lt;tt class="docutils literal"&gt;LaTeX&lt;/tt&gt; document that you
are editing your paper in.  Presumably you will be using some journal's custom
style file.  We need the width, in points, of where your figure will go.  Add
this to your &lt;tt class="docutils literal"&gt;tex&lt;/tt&gt; file to force the compiler to show you the text width:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;some&lt;span class="nb"&gt;_&lt;/span&gt;journal&lt;span class="nb"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;some&lt;span class="nb"&gt;_&lt;/span&gt;packages,here&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;% maybe some other preamble goes here&lt;/span&gt;

&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;% some awesome science goes here&lt;/span&gt;

&lt;span class="k"&gt;\showthe\textwidth&lt;/span&gt;  &lt;span class="c"&gt;% &amp;lt;-- this tells you the textwidth&lt;/span&gt;

&lt;span class="c"&gt;% some more awesome science&lt;/span&gt;
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This number will probably be 300--400 pts.  Lets's say 350pt.  The following
python code will convert this number to figure dimensions that look
aesthetically pleasing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;WIDTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;350.0&lt;/span&gt;  &lt;span class="c"&gt;# the number latex spits out&lt;/span&gt;
&lt;span class="n"&gt;FACTOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.45&lt;/span&gt;  &lt;span class="c"&gt;# the fraction of the width you&amp;#39;d like the figure to occupy&lt;/span&gt;
&lt;span class="n"&gt;fig_width_pt&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WIDTH&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;FACTOR&lt;/span&gt;

&lt;span class="n"&gt;inches_per_pt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;72.27&lt;/span&gt;
&lt;span class="n"&gt;golden_ratio&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;  &lt;span class="c"&gt;# because it looks good&lt;/span&gt;

&lt;span class="n"&gt;fig_width_in&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fig_width_pt&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;inches_per_pt&lt;/span&gt;  &lt;span class="c"&gt;# figure width in inches&lt;/span&gt;
&lt;span class="n"&gt;fig_height_in&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fig_width_in&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;golden_ratio&lt;/span&gt;   &lt;span class="c"&gt;# figure height in inches&lt;/span&gt;
&lt;span class="n"&gt;fig_dims&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fig_width_in&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fig_height_in&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;# fig dims as a list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can then either set the figure dimensions when creating the figure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fig_dims&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or you can pre compute &lt;tt class="docutils literal"&gt;fig_dims&lt;/tt&gt; by hand (say it's &lt;tt class="docutils literal"&gt;7.3&lt;/tt&gt; wide by &lt;tt class="docutils literal"&gt;4.2&lt;/tt&gt;
high) and set the corresponding entry in the &lt;tt class="docutils literal"&gt;matplotlibrc&lt;/tt&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;7.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, when the time comes to include figures into your document, remember to
use the &lt;tt class="docutils literal"&gt;FACTOR&lt;/tt&gt; variable to have your plots scaled properly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;some&lt;span class="nb"&gt;_&lt;/span&gt;journal&lt;span class="nb"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;some&lt;span class="nb"&gt;_&lt;/span&gt;packages,here,graphicx&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;% maybe some other preamble goes here&lt;/span&gt;

&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;% some awesome science goes here&lt;/span&gt;

&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;figure&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\includegraphics&lt;/span&gt;&lt;span class="na"&gt;[width=0.45\textwidth]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;figure.pdf&lt;span class="nb"&gt;}&lt;/span&gt;  &lt;span class="c"&gt;% &amp;lt;-- FACTOR = 0.45&lt;/span&gt;
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;figure&lt;span class="nb"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;% some more awesome science&lt;/span&gt;
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now your figures should look good.  This is all personal preference, though.
Feel free to play around and find something you like.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="putting-it-all-together"&gt;
&lt;h2&gt;Putting it all together&lt;/h2&gt;
&lt;p&gt;Well, those four issues are the ones whose defaults irk me the most, but it's
kind of a pain to type out all that code for each plot I do.  Even still, I
might be writing several papers at once, each containing several plots.
There's a better way to manage this, and it's to use the &lt;tt class="docutils literal"&gt;matplotlibrc&lt;/tt&gt; file.&lt;/p&gt;
&lt;p&gt;As a quick introduction, the keys of the &lt;tt class="docutils literal"&gt;rcParams&lt;/tt&gt; dictionary correspond to
entries in the &lt;tt class="docutils literal"&gt;matplotlibrc&lt;/tt&gt; file.  For the issues discussed above, here are
the mappings from the &lt;tt class="docutils literal"&gt;rcParams&lt;/tt&gt; dictionary to the entry in the
&lt;tt class="docutils literal"&gt;matplotlibrc&lt;/tt&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# rcParams dict&lt;/span&gt;
&lt;span class="n"&gt;rcParams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;axes.labelsize&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="n"&gt;rcParams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;xtick.labelsize&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="n"&gt;rcParams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ytick.labelsize&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="n"&gt;rcParams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;legend.fontsize&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="n"&gt;rcParams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;font.family&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;serif&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;rcParams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;font.serif&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Computer Modern Roman&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;rcParams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;text.usetex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;rcParams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;figure.figsize&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;7.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.2&lt;/span&gt;

&lt;span class="c"&gt;# matplotlibrc file&lt;/span&gt;
&lt;span class="n"&gt;axes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;labelsize&lt;/span&gt;  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;9.0&lt;/span&gt;  &lt;span class="c"&gt;# fontsize of the x any y labels&lt;/span&gt;
&lt;span class="n"&gt;xtick&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;labelsize&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;9.0&lt;/span&gt;  &lt;span class="c"&gt;# fontsize of the tick labels&lt;/span&gt;
&lt;span class="n"&gt;ytick&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;labelsize&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;9.0&lt;/span&gt;  &lt;span class="c"&gt;# fontsize of the tick labels&lt;/span&gt;
&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fontsize&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;9.0&lt;/span&gt;
&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;family&lt;/span&gt;     &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;serif&lt;/span&gt;
&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serif&lt;/span&gt;      &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Computer&lt;/span&gt; &lt;span class="n"&gt;Modern&lt;/span&gt; &lt;span class="n"&gt;Roman&lt;/span&gt;
&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;usetex&lt;/span&gt;     &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;  &lt;span class="c"&gt;# use latex for all text handling&lt;/span&gt;
&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;7.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Usually, the &lt;tt class="docutils literal"&gt;matplotlibrc&lt;/tt&gt; file lives in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.matplotlib&lt;/span&gt;&lt;/tt&gt;.  If it doesn't,
system-wide defaults are used.  If it does, then that file determines the
defaults to be used for all plots you create.  The downside is that it's likely
the case, especially if you're working on more than one paper, that you'd like
a different set of defaults to apply to each one.&lt;/p&gt;
&lt;p&gt;Enter &lt;tt class="docutils literal"&gt;rc_file&lt;/tt&gt;.  This function takes a path to a file that is treated as a
&lt;tt class="docutils literal"&gt;matplotlibrc&lt;/tt&gt; file.  Now you can keep your default settings in one place for
each journal.  Moreover, if you submit any new papers to that journal, all your
plots will look the same across multiple papers.  Just copy the matplotlib
defaults, from &lt;a class="reference external" href="http://matplotlib.org/users/customizing.html#matplotlibrc-sample"&gt;here&lt;/a&gt;, override with your defaults, and then stick the following
at the top of your plotter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;rc_file&lt;/span&gt;
&lt;span class="n"&gt;rc_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/path/to/my/rc/file.rc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# &amp;lt;-- the file containing your settings&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;# plot some awesome science&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tight_layout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pad&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# Make the figure use all available whitespace&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;awesome_science.pdf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice the use of &lt;tt class="docutils literal"&gt;tight_layout&lt;/tt&gt;, which makes the figure use all the
available whitespace.&lt;/p&gt;
&lt;p&gt;Now all your plots will look the same, every time, and for every journal.  Your
plots are now reproducible.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="matplotlib"></category><category term="science"></category></entry><entry><title>Getting started with matplotlib</title><link href="http://dmcdougall.github.io/getting-started-with-matplotlib.html" rel="alternate"></link><updated>2013-05-17T00:00:00+02:00</updated><author><name>Damon McDougall</name></author><id>tag:dmcdougall.github.io,2013-05-17:getting-started-with-matplotlib.html</id><summary type="html">&lt;p&gt;Bear with me; this is my first blog post.&lt;/p&gt;
&lt;p&gt;I want to write about something that I care about.  I care about software and I
care about science.  More importantly, I care about how these two interact and
how software can help the scientific community.  Presentation of science to the
public in an understandable fashion is difficult.  It's always hard to gauge at
what level a scientist should pitch their presentation, and that's where
pictures come in handy.&lt;/p&gt;
&lt;p&gt;Most people abosrb information best visually.  Auditory and kinematic learners
also exist, but most people are visual learners.  To that end, I decided to
write about &lt;a class="reference external" href="http://matplotlib.org"&gt;matplotlib&lt;/a&gt;, a plotting library written in Python.  This should be
fairly introductory.&lt;/p&gt;
&lt;div class="section" id="installing"&gt;
&lt;h2&gt;Installing&lt;/h2&gt;
&lt;p&gt;For some reason, installing python packages is notoriously hard if you're not
exposed to the various different approaches already out there.  I'm not going
to go through all of them.  Instead, I recommend you install matplotlib through
your operating system's package manager.  If you're on Ubuntu, it's
&lt;tt class="docutils literal"&gt;aptitude&lt;/tt&gt;.  If you're on RHEL, it's &lt;tt class="docutils literal"&gt;yum&lt;/tt&gt;.  If you're on OS X, you don't
have a package manager by default and you should install one.  I recommend
&lt;a class="reference external" href="http://www.macports.org"&gt;macports&lt;/a&gt;, but others speak volumes about &lt;a class="reference external" href="http://mxcl.github.io/homebrew"&gt;homebrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Personally, I like to install software from source by hand.  If you're scared
of doing it you should give it a try.  It's super educational.  I will go
through the installation from source procedure on a Mac in another blog post,
since I don't want to bloat this one.  In what remains, I'll assume you have it
installed.&lt;/p&gt;
&lt;p&gt;To check you have installed matplotlib correctly, you can execute the following
in a terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python -c &lt;span class="s2"&gt;&amp;quot;import matplotlib&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The command &lt;tt class="docutils literal"&gt;echo $?&lt;/tt&gt; just prints out the exit status of the previous
command.  If you get a &lt;tt class="docutils literal"&gt;0&lt;/tt&gt; then the previous command was successful.  If you
get a &lt;tt class="docutils literal"&gt;1&lt;/tt&gt;, or anything nonzero, then matplotlib is not installed correctly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="your-first-plot"&gt;
&lt;h2&gt;Your first plot&lt;/h2&gt;
&lt;p&gt;Now that matplotlib is installed correctly, you can create your first plot.&lt;/p&gt;
&lt;p&gt;From now on, I'll be using the IPython prompt, but you don't need that to
along.  All the commands are the same and will work in the regular python
prompt.&lt;/p&gt;
&lt;p&gt;First, we boot up the ipython console:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ ipython
Python 2.7.3 (default, Nov 29 2012, 11:01:29)
Type &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.

IPython 0.13.2 -- An enhanced Interactive Python.
?         -&amp;gt; Introduction and overview of IPython&amp;#39;s features.
%quickref -&amp;gt; Quick reference.
help      -&amp;gt; Python&amp;#39;s own help system.
object?   -&amp;gt; Details about &amp;#39;object&amp;#39;, use &amp;#39;object??&amp;#39; for extra details.

In [1]:
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we import &lt;tt class="docutils literal"&gt;pyplot&lt;/tt&gt;, a set of convenience methods that interface well with
matplotlib's internals:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, we create a &lt;tt class="docutils literal"&gt;Figure&lt;/tt&gt; object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;Figure&lt;/tt&gt; is the object that holds the axes, which we create now:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_subplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;Axes&lt;/tt&gt; &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt; object is where most of the magic happens.  This is the
object you will interface with the most to do all of your plotting.  Here is a
simple plotting command that creates a line plot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Line2D&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x10860ad50&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;plot&lt;/tt&gt; function takes a list of &lt;tt class="docutils literal"&gt;x&lt;/tt&gt;-coordinates and a list of
&lt;tt class="docutils literal"&gt;y&lt;/tt&gt;-coordinates and returns a list of objects called &lt;tt class="docutils literal"&gt;Line2D&lt;/tt&gt; objects.
A &lt;tt class="docutils literal"&gt;Line2D&lt;/tt&gt; object is a matplotlib object that represents the lines in the
figure that join the coordinates together.  We will explore &lt;tt class="docutils literal"&gt;Line2D&lt;/tt&gt; objects,
and other objects, in a different post.  For now, just take it for granted that
&lt;tt class="docutils literal"&gt;ax.plot&lt;/tt&gt; connects the passed coordinates with lines to create a line plot.
We can save the figure with the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;plot.pdf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will save the figure in &lt;tt class="docutils literal"&gt;pdf&lt;/tt&gt; format.  Open it and take a look.  It
should look a little like this:&lt;/p&gt;
&lt;object class="align-left" data="./static/images/lineplot.svg" style="width: 600px; height: 400px;" type="image/svg+xml"&gt;
./static/images/lineplot.svg&lt;/object&gt;
&lt;p&gt;There are lots of file types that matplotlib supports.  The ones I use most
commonly are &lt;tt class="docutils literal"&gt;pdf&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;png&lt;/tt&gt;.  In fact, the image above is an &lt;tt class="docutils literal"&gt;svg&lt;/tt&gt; file.
It is common in the scientific community to produce scalable vector graphics,
and matplotlib allows this.  It also supports &lt;tt class="docutils literal"&gt;ps&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;eps&lt;/tt&gt;.  For a full
list of supported file types see &lt;a class="reference external" href="http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.savefig"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;It's actually an &lt;tt class="docutils literal"&gt;AxesSubplot&lt;/tt&gt; object, not an &lt;tt class="docutils literal"&gt;Axes&lt;/tt&gt; object.  An
&lt;tt class="docutils literal"&gt;AxesSubplot&lt;/tt&gt; is just an &lt;tt class="docutils literal"&gt;Axes&lt;/tt&gt; object with some extra functions to
allow manipulation of its position within a &lt;tt class="docutils literal"&gt;Figure&lt;/tt&gt;.  The reason for
this is that there may be more than one set of axes in a figure.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="another-example"&gt;
&lt;h2&gt;Another example&lt;/h2&gt;
&lt;p&gt;You can stop here, or you can follow along with a more complicated line plot
using &lt;tt class="docutils literal"&gt;numpy&lt;/tt&gt;, a high performance python library for dealing with array
objects.  Carrying on from within the same ipython session:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cla&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This clears the axes of the old plot ready to plot something new.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we import &lt;tt class="docutils literal"&gt;numpy&lt;/tt&gt; so we can use it below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This creates an array, &lt;tt class="docutils literal"&gt;x&lt;/tt&gt;, of 1000 equally spaced points between &lt;tt class="docutils literal"&gt;0&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;1&lt;/tt&gt;, inclusive.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This line takes advantage of some of &lt;tt class="docutils literal"&gt;numpy&lt;/tt&gt;'s machinery.  The multiplication
of &lt;tt class="docutils literal"&gt;numpy&lt;/tt&gt; arrays is done component-wise.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Line2D&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x108a728d0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again, we pass in the &lt;tt class="docutils literal"&gt;x&lt;/tt&gt;- and &lt;tt class="docutils literal"&gt;y&lt;/tt&gt;-coordinates to &lt;tt class="docutils literal"&gt;plot&lt;/tt&gt;.  This draws
lines between the passed coordinates.  Go ahead and save your creation.  It
should look something like this:&lt;/p&gt;
&lt;object class="align-left" data="./static/images/sineplot.svg" style="width: 600px; height: 400px;" type="image/svg+xml"&gt;
./static/images/sineplot.svg&lt;/object&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="matplotlib"></category><category term="science"></category></entry></feed>